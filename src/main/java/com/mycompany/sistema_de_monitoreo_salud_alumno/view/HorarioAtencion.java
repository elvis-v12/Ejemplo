/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.sistema_de_monitoreo_salud_alumno.view;


import com.mycompany.sistema_de_monitoreo_salud_alumno.controler.Controler.ConexionSQL;
import com.mycompany.sistema_de_monitoreo_salud_alumno.controler.Controler.SesionDAOImpl;
import com.mycompany.sistema_de_monitoreo_salud_alumno.model.Alumno;
import com.mycompany.sistema_de_monitoreo_salud_alumno.model.Sesion;
import java.util.Date;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author ELVIS
 */
public class HorarioAtencion extends javax.swing.JFrame {
            private DefaultTableModel modelo;

    /**
     * Creates new form HorarioAtencion
     */
    public HorarioAtencion() {
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setLocationRelativeTo(null);
        modelo = new DefaultTableModel();
        modelo.addColumn("IdSesion");
        modelo.addColumn("IdAlumno");
        modelo.addColumn("Fecha inicio");
        modelo.addColumn("Fecha Fin");
        tb_Sesion.setModel(modelo);    
    }
private void limpiarCampos() {
    // Limpiar los campos de entrada
    txt_Filtro.setText("");
    txt_Paciente.setText("");
    jDateInicio.setDate(null);
    jDateFin.setDate(null);
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Panel_Sesion = new javax.swing.JPanel();
        txt_Paciente = new javax.swing.JTextField();
        btn_Agregar = new javax.swing.JButton();
        btn_Modificar = new javax.swing.JButton();
        btn_Eliminar = new javax.swing.JButton();
        jDateInicio = new com.toedter.calendar.JDateChooser();
        jDateFin = new com.toedter.calendar.JDateChooser();
        btn_Ver = new javax.swing.JButton();
        Panel_Buscar = new javax.swing.JPanel();
        txt_Filtro = new javax.swing.JTextField();
        btn_Buscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_Sesion = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        Panel_Sesion.setBackground(new java.awt.Color(255, 255, 255));
        Panel_Sesion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SESION", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tw Cen MT Condensed", 3, 18))); // NOI18N

        txt_Paciente.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "IDAlumno", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tw Cen MT Condensed", 2, 18))); // NOI18N

        btn_Agregar.setBackground(new java.awt.Color(0, 0, 51));
        btn_Agregar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_Agregar.setForeground(new java.awt.Color(255, 255, 255));
        btn_Agregar.setText("Agregar");
        btn_Agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AgregarActionPerformed(evt);
            }
        });

        btn_Modificar.setBackground(new java.awt.Color(0, 0, 51));
        btn_Modificar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_Modificar.setForeground(new java.awt.Color(255, 255, 255));
        btn_Modificar.setText("Modificar");
        btn_Modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ModificarActionPerformed(evt);
            }
        });

        btn_Eliminar.setBackground(new java.awt.Color(102, 0, 0));
        btn_Eliminar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_Eliminar.setForeground(new java.awt.Color(255, 255, 255));
        btn_Eliminar.setText("Eliminar");
        btn_Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_EliminarActionPerformed(evt);
            }
        });

        jDateInicio.setToolTipText("");

        btn_Ver.setBackground(new java.awt.Color(102, 0, 0));
        btn_Ver.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_Ver.setForeground(new java.awt.Color(255, 255, 255));
        btn_Ver.setText("Ver");
        btn_Ver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_VerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Panel_SesionLayout = new javax.swing.GroupLayout(Panel_Sesion);
        Panel_Sesion.setLayout(Panel_SesionLayout);
        Panel_SesionLayout.setHorizontalGroup(
            Panel_SesionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_SesionLayout.createSequentialGroup()
                .addGroup(Panel_SesionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_Paciente)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel_SesionLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(Panel_SesionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDateFin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDateInicio, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(Panel_SesionLayout.createSequentialGroup()
                        .addGroup(Panel_SesionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn_Eliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_Agregar, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Panel_SesionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_Modificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_Ver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        Panel_SesionLayout.setVerticalGroup(
            Panel_SesionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_SesionLayout.createSequentialGroup()
                .addComponent(txt_Paciente, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jDateInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jDateFin, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(Panel_SesionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Agregar)
                    .addComponent(btn_Modificar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel_SesionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Eliminar)
                    .addComponent(btn_Ver)))
        );

        Panel_Buscar.setBackground(new java.awt.Color(255, 255, 255));
        Panel_Buscar.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "BUSCADOR", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tw Cen MT Condensed", 3, 18))); // NOI18N

        txt_Filtro.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filtro", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BOTTOM, new java.awt.Font("Tw Cen MT Condensed", 2, 18))); // NOI18N

        btn_Buscar.setBorder(null);

        javax.swing.GroupLayout Panel_BuscarLayout = new javax.swing.GroupLayout(Panel_Buscar);
        Panel_Buscar.setLayout(Panel_BuscarLayout);
        Panel_BuscarLayout.setHorizontalGroup(
            Panel_BuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_BuscarLayout.createSequentialGroup()
                .addComponent(txt_Filtro, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_Buscar)
                .addContainerGap())
        );
        Panel_BuscarLayout.setVerticalGroup(
            Panel_BuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btn_Buscar)
            .addComponent(txt_Filtro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        tb_Sesion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tb_Sesion);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Panel_Sesion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Panel_Buscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Panel_Sesion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Panel_Buscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_VerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_VerActionPerformed
        // Crear una instancia de SesionDAOImpl
        ConexionSQL conexionSQL = new ConexionSQL(); // Asegúrate de tener tu conexión configurada
        SesionDAOImpl sesionDAO = new SesionDAOImpl(conexionSQL);

        // Obtener todas las sesiones
        List<Sesion> sesiones = sesionDAO.obtenerTodasLasSesiones();

        // Obtener el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) tb_Sesion.getModel();

        // Limpiar la tabla antes de agregar las nuevas sesiones
        model.setRowCount(0);

        // Agregar las sesiones al modelo de la tabla
        for (Sesion sesion : sesiones) {
            model.addRow(new Object[]{
                sesion.getIdSesion(),
                sesion.getAlumno().getIdAlumno(),
                sesion.getFechaInicio().toString(),
                sesion.getFechaFin().toString()
            });
        }
    }//GEN-LAST:event_btn_VerActionPerformed

    private void btn_EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_EliminarActionPerformed
     // Obtener el ID de la sesión desde el campo de texto
    String idSesionText = txt_Filtro.getText();
    
    if (idSesionText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, llene el campo de ID.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    int idSesion;
    try {
        idSesion = Integer.parseInt(idSesionText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "El ID de la sesión debe ser un número.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Crear una instancia de SesionDAOImpl
    ConexionSQL conexionSQL = new ConexionSQL(); // Asegúrate de tener tu conexión configurada
    SesionDAOImpl sesionDAO = new SesionDAOImpl(conexionSQL);
    
    // Eliminar la sesión
    sesionDAO.eliminarSesion(idSesion);
    
    // Verificar si la sesión fue eliminada (podrías implementar una lógica adicional para confirmar la eliminación)
    List<Sesion> sesiones = sesionDAO.obtenerTodasLasSesiones();
    boolean sesionEliminada = true; // Asume que la sesión fue eliminada si no se encuentra en la lista obtenida
    for (Sesion sesion : sesiones) {
        if (sesion.getIdSesion() == idSesion) {
            sesionEliminada = false;
            break;
        }
    }
    
    if (sesionEliminada) {
        JOptionPane.showMessageDialog(this, "Sesión eliminada con éxito.", "Información", JOptionPane.INFORMATION_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(this, "No se pudo eliminar la sesión. Verifique el ID e intente nuevamente.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    // Actualizar la tabla con todas las sesiones
    DefaultTableModel model = (DefaultTableModel) tb_Sesion.getModel();
    model.setRowCount(0); // Limpiar la tabla antes de agregar las nuevas sesiones
    for (Sesion sesion : sesiones) {
        model.addRow(new Object[]{
            sesion.getIdSesion(),
            sesion.getAlumno().getIdAlumno(),
            sesion.getFechaInicio().toString(),
            sesion.getFechaFin().toString()
        });
    }
    }//GEN-LAST:event_btn_EliminarActionPerformed

    private void btn_AgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AgregarActionPerformed
     // Obtener los datos de la nueva sesión desde los campos de texto y JDateChooser
    String idAlumnoText = txt_Paciente.getText();
    Date fechaInicio = jDateInicio.getDate();
    Date fechaFin = jDateFin.getDate();
    
    // Validar los datos
    if (idAlumnoText.isEmpty() || fechaInicio == null || fechaFin == null) {
        JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    int idAlumno;
    try {
        idAlumno = Integer.parseInt(idAlumnoText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "El ID del alumno debe ser un número.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Crear una instancia de SesionDAOImpl
    ConexionSQL conexionSQL = new ConexionSQL(); // Asegúrate de tener tu conexión configurada
    SesionDAOImpl sesionDAO = new SesionDAOImpl(conexionSQL);
    
    // Obtener el alumno por ID
    Alumno alumno = sesionDAO.obtenerAlumnoPorId(idAlumno); // Usamos el método que ya tienes implementado
    if (alumno == null) {
        JOptionPane.showMessageDialog(this, "Alumno no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Crear una nueva sesión
    Sesion nuevaSesion = new Sesion(0, alumno, fechaInicio, fechaFin); // ID de sesión se genera automáticamente por la base de datos
    
    // Agregar la nueva sesión
    sesionDAO.agregarSesion(nuevaSesion);
    
    // Actualizar la tabla con todas las sesiones
    List<Sesion> sesiones = sesionDAO.obtenerTodasLasSesiones();
    DefaultTableModel model = (DefaultTableModel) tb_Sesion.getModel();
    model.setRowCount(0); // Limpiar la tabla antes de agregar las nuevas sesiones
    for (Sesion sesion : sesiones) {
        model.addRow(new Object[]{
            sesion.getIdSesion(),
            sesion.getAlumno().getIdAlumno(),
            sesion.getFechaInicio().toString(),
            sesion.getFechaFin().toString()
        });
    }
    
    // Mostrar mensaje de éxito
    JOptionPane.showMessageDialog(this, "Sesión agregada con éxito.", "Información", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btn_AgregarActionPerformed

    private void btn_ModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ModificarActionPerformed
      
    // Obtener los datos de la sesión a modificar desde los campos de texto y JDateChooser
    String idSesionText = txt_Filtro.getText();
    String idAlumnoText = txt_Filtro.getText();
    Date fechaInicio = jDateInicio.getDate();
    Date fechaFin = jDateFin.getDate();
    
    // Validar los datos
    if (idSesionText.isEmpty() || idAlumnoText.isEmpty() || fechaInicio == null || fechaFin == null) {
        JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    int idSesion;
    int idAlumno;
    try {
        idSesion = Integer.parseInt(idSesionText);
        idAlumno = Integer.parseInt(idAlumnoText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "El ID de la sesión y el ID del alumno deben ser números.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Crear una instancia de SesionDAOImpl
    ConexionSQL conexionSQL = new ConexionSQL(); // Asegúrate de tener tu conexión configurada
    SesionDAOImpl sesionDAO = new SesionDAOImpl(conexionSQL);
    
    // Obtener el alumno por ID
    Alumno alumno = sesionDAO.obtenerAlumnoPorId(idAlumno); // Usamos el método que ya tienes implementado
    if (alumno == null) {
        JOptionPane.showMessageDialog(this, "Alumno no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Crear la sesión a actualizar
    Sesion sesion = new Sesion(idSesion, alumno, fechaInicio, fechaFin);
    
    // Actualizar la sesión
    sesionDAO.actualizarSesion(sesion);
    
    // Actualizar la tabla con todas las sesiones
    List<Sesion> sesiones = sesionDAO.obtenerTodasLasSesiones();
    DefaultTableModel model = (DefaultTableModel) tb_Sesion.getModel();
    model.setRowCount(0); // Limpiar la tabla antes de agregar las nuevas sesiones
    for (Sesion s : sesiones) {
        model.addRow(new Object[]{
            s.getIdSesion(),
            s.getAlumno().getIdAlumno(),
            s.getFechaInicio().toString(),
            s.getFechaFin().toString()
        });
    }
    
    // Mostrar mensaje de éxito
    JOptionPane.showMessageDialog(this, "Sesión actualizada con éxito.", "Información", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btn_ModificarActionPerformed

 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Panel_Buscar;
    private javax.swing.JPanel Panel_Sesion;
    private javax.swing.JButton btn_Agregar;
    private javax.swing.JButton btn_Buscar;
    private javax.swing.JButton btn_Eliminar;
    private javax.swing.JButton btn_Modificar;
    private javax.swing.JButton btn_Ver;
    private com.toedter.calendar.JDateChooser jDateFin;
    private com.toedter.calendar.JDateChooser jDateInicio;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tb_Sesion;
    private javax.swing.JTextField txt_Filtro;
    private javax.swing.JTextField txt_Paciente;
    // End of variables declaration//GEN-END:variables
}
