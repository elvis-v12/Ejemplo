/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.sistema_de_monitoreo_salud_alumno.view;

import javax.swing.table.DefaultTableModel;
import com.mycompany.sistema_de_monitoreo_salud_alumno.controler.Controler.AlumnoDAOImpl;
import com.mycompany.sistema_de_monitoreo_salud_alumno.controler.Controler.ConexionSQL;
import com.mycompany.sistema_de_monitoreo_salud_alumno.controler.Controler.interf.AlumnoDAO;
import com.mycompany.sistema_de_monitoreo_salud_alumno.model.Alumno;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author ELVIS
 */
public class AlumnosUcv extends javax.swing.JFrame {
            private DefaultTableModel modelo;

    /**
     * Creates new form AlumnosUcv
     */
    public AlumnosUcv() {
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setLocationRelativeTo(null);
    // Configurar la tabla tb_Proveedor
    modelo = new DefaultTableModel();
    modelo.addColumn("ID");
    modelo.addColumn("Codigo");
    modelo.addColumn("Carrera");
    modelo.addColumn("Ciclo");
    modelo.addColumn("Nombre");
    modelo.addColumn("Apellido");
    modelo.addColumn("Edad");
    tb_Alumno.setModel(modelo);
    
    tb_Alumno.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Obtiene la fila seleccionada
                int filaSeleccionada = tb_Alumno.getSelectedRow();
                // Verifica si se ha seleccionado alguna fila
                if (filaSeleccionada != -1) {
                    // Obtiene el ID del alumno de la fila seleccionada
                    int idAlumno = (int) tb_Alumno.getValueAt(filaSeleccionada, 0); // Suponiendo que el ID del alumno está en la primera columna
                           ConexionSQL conexionSQL = new ConexionSQL();
                    // Instanciar AlumnoDAOImpl y llamar al método eliminarAlumno
                    AlumnoDAOImpl alumnoDAO = new AlumnoDAOImpl(conexionSQL);
                    alumnoDAO.eliminarAlumno(idAlumno);

                    // Actualizar la tabla después de eliminar al alumno
                    actualizarTablaAlumnos();
                }
            }
        });
    }
private void limpiarCampos() {
    txt_Nombre.setText("");
    txt_Apellido.setText("");
    txt_Edad.setText("");
    txt_CodAlumno.setText("");
    cbx_Carrera.setSelectedIndex(0); 
    cbx_Ciclo.setSelectedIndex(0);
}


private void actualizarTablaAlumnos() {
    // Obtener todos los alumnos de la base de datos utilizando la instancia de AlumnoDAOImpl
    ConexionSQL conexionSQL = new ConexionSQL();
    AlumnoDAOImpl alumnoDAO = new AlumnoDAOImpl(conexionSQL);
    List<Alumno> todosLosAlumnos = alumnoDAO.obtenerTodosLosAlumnos();
    
    // Limpiar la tabla antes de agregar los nuevos datos
    DefaultTableModel model = (DefaultTableModel) tb_Alumno.getModel();
    model.setRowCount(0);
    
    // Iterar sobre la lista de alumnos y agregar cada uno como una fila en la tabla
    for (Alumno alumno : todosLosAlumnos) {
        model.addRow(new Object[]{
            alumno.getIdAlumno(),
            alumno.getCodigoAlumno(),
            alumno.getCarrera(),
            alumno.getCiclo(),
            alumno.getNombre(),
            alumno.getApellido(),
            alumno.getEdad()
        });
    }
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Panel_Alumno = new javax.swing.JPanel();
        txt_CodAlumno = new javax.swing.JTextField();
        txt_Apellido = new javax.swing.JTextField();
        txt_Nombre = new javax.swing.JTextField();
        txt_Edad = new javax.swing.JTextField();
        btn_Agregar = new javax.swing.JButton();
        btn_Modificar = new javax.swing.JButton();
        cbx_Carrera = new javax.swing.JComboBox<>();
        cbx_Ciclo = new javax.swing.JComboBox<>();
        btn_Eliminar1 = new javax.swing.JButton();
        Ver = new javax.swing.JButton();
        Panel_Buscar = new javax.swing.JPanel();
        txt_Filtro = new javax.swing.JTextField();
        btn_Buscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_Alumno = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        Panel_Alumno.setBackground(new java.awt.Color(255, 255, 255));
        Panel_Alumno.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "DATOS ALUMNO", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tw Cen MT Condensed", 3, 18))); // NOI18N

        txt_CodAlumno.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Codigo Alumno", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tw Cen MT Condensed", 2, 18))); // NOI18N

        txt_Apellido.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Apellido", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tw Cen MT Condensed", 2, 18))); // NOI18N

        txt_Nombre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nombre", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tw Cen MT Condensed", 2, 18))); // NOI18N

        txt_Edad.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Edad", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tw Cen MT Condensed", 2, 18))); // NOI18N

        btn_Agregar.setBackground(new java.awt.Color(0, 0, 51));
        btn_Agregar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_Agregar.setForeground(new java.awt.Color(255, 255, 255));
        btn_Agregar.setText("Agregar");
        btn_Agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AgregarActionPerformed(evt);
            }
        });

        btn_Modificar.setBackground(new java.awt.Color(0, 0, 51));
        btn_Modificar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_Modificar.setForeground(new java.awt.Color(255, 255, 255));
        btn_Modificar.setText("Modificar");
        btn_Modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ModificarActionPerformed(evt);
            }
        });

        cbx_Carrera.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ingenieria Sistemas", "Psicologia", "Derecho", "Arquitectura", "Ingenieria Civil" }));
        cbx_Carrera.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Carrera", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tw Cen MT Condensed", 2, 18))); // NOI18N

        cbx_Ciclo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        cbx_Ciclo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ciclo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tw Cen MT Condensed", 2, 18))); // NOI18N

        btn_Eliminar1.setBackground(new java.awt.Color(102, 0, 0));
        btn_Eliminar1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_Eliminar1.setForeground(new java.awt.Color(255, 255, 255));
        btn_Eliminar1.setText("Eliminar");
        btn_Eliminar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Eliminar1ActionPerformed(evt);
            }
        });

        Ver.setBackground(new java.awt.Color(102, 0, 0));
        Ver.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Ver.setForeground(new java.awt.Color(255, 255, 255));
        Ver.setText("Ver");
        Ver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Panel_AlumnoLayout = new javax.swing.GroupLayout(Panel_Alumno);
        Panel_Alumno.setLayout(Panel_AlumnoLayout);
        Panel_AlumnoLayout.setHorizontalGroup(
            Panel_AlumnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_AlumnoLayout.createSequentialGroup()
                .addGroup(Panel_AlumnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_CodAlumno)
                    .addComponent(txt_Nombre)
                    .addComponent(txt_Apellido)
                    .addComponent(txt_Edad)
                    .addComponent(cbx_Carrera, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbx_Ciclo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(Panel_AlumnoLayout.createSequentialGroup()
                        .addGroup(Panel_AlumnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn_Eliminar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_Agregar, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(Panel_AlumnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_Modificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Ver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        Panel_AlumnoLayout.setVerticalGroup(
            Panel_AlumnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_AlumnoLayout.createSequentialGroup()
                .addComponent(txt_CodAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_Apellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_Edad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbx_Carrera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbx_Ciclo, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel_AlumnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Agregar)
                    .addComponent(btn_Modificar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel_AlumnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Eliminar1)
                    .addComponent(Ver))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        Panel_Buscar.setBackground(new java.awt.Color(255, 255, 255));
        Panel_Buscar.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "BUSCADOR", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tw Cen MT Condensed", 3, 18))); // NOI18N

        txt_Filtro.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filtro", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BOTTOM, new java.awt.Font("Tw Cen MT Condensed", 2, 18))); // NOI18N

        btn_Buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/lupa.png"))); // NOI18N
        btn_Buscar.setBorder(null);
        btn_Buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_BuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Panel_BuscarLayout = new javax.swing.GroupLayout(Panel_Buscar);
        Panel_Buscar.setLayout(Panel_BuscarLayout);
        Panel_BuscarLayout.setHorizontalGroup(
            Panel_BuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_BuscarLayout.createSequentialGroup()
                .addComponent(txt_Filtro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_Buscar)
                .addContainerGap())
        );
        Panel_BuscarLayout.setVerticalGroup(
            Panel_BuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btn_Buscar)
            .addComponent(txt_Filtro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        tb_Alumno.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tb_Alumno);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Panel_Alumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Panel_Buscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Panel_Alumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Panel_Buscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_AgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AgregarActionPerformed
     // Obtener los datos de los campos de texto
    String nombre = txt_Nombre.getText();
    String apellido = txt_Apellido.getText();
    int edad;
    try {
        edad = Integer.parseInt(txt_Edad.getText());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Por favor, ingrese una edad válida.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    String codigoAlumno = txt_CodAlumno.getText();
String carrera = cbx_Carrera.getSelectedItem().toString();
int ciclo;
    try {
          ciclo = Integer.parseInt(cbx_Ciclo.getSelectedItem().toString());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Por favor, ingrese un ciclo válido.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Validar que todos los campos están completos
    if (nombre.isEmpty() || apellido.isEmpty() || codigoAlumno.isEmpty() || carrera.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Crear un objeto Alumno
    Alumno nuevoAlumno = new Alumno(0, codigoAlumno, carrera, ciclo, 0, nombre, apellido, edad);
    
    // Crear una instancia de AlumnoDAOImpl
    ConexionSQL conexionSQL = new ConexionSQL(); // Asegúrate de tener tu conexión configurada
    AlumnoDAOImpl alumnoDAO = new AlumnoDAOImpl(conexionSQL);
    
    // Agregar el nuevo alumno
    alumnoDAO.agregarAlumno(nuevoAlumno);
    
    // Actualizar la tabla con todos los alumnos
    List<Alumno> alumnos = alumnoDAO.obtenerTodosLosAlumnos();
    DefaultTableModel model = (DefaultTableModel) tb_Alumno.getModel();
    model.setRowCount(0); // Limpiar la tabla antes de agregar los nuevos alumnos
    for (Alumno alumno : alumnos) {
        model.addRow(new Object[]{
            alumno.getIdAlumno(),
            alumno.getCodigoAlumno(),
            alumno.getCarrera(),
            alumno.getCiclo(),
            alumno.getIdPersona(),
            alumno.getNombre(),
            alumno.getApellido(),
            alumno.getEdad()
        });
    }
    
    // Limpiar los campos de texto
    limpiarCampos();
    
    // Mostrar mensaje de éxito
    JOptionPane.showMessageDialog(this, "Alumno agregado con éxito.", "Información", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btn_AgregarActionPerformed

    private void btn_ModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ModificarActionPerformed
     // Obtener los datos de los campos de texto
    String idAlumnoText = txt_Filtro.getText();
    String nombre = txt_Nombre.getText();
    String apellido = txt_Apellido.getText();
    int edad;
    try {
        edad = Integer.parseInt(txt_Edad.getText());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Por favor, ingrese una edad válida.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    String codigoAlumno = txt_CodAlumno.getText();
    String carrera = cbx_Carrera.getSelectedItem().toString(); // Asegúrate de usar getSelectedItem() para obtener el valor seleccionado
    int ciclo;
    try {
        ciclo = Integer.parseInt(cbx_Ciclo.getSelectedItem().toString()); // Asegúrate de usar getSelectedItem() para obtener el valor seleccionado
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Por favor, ingrese un ciclo válido.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Validar que todos los campos están completos
    if (idAlumnoText.isEmpty() || nombre.isEmpty() || apellido.isEmpty() || codigoAlumno.isEmpty() || carrera.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    int idAlumno;
    try {
        idAlumno = Integer.parseInt(idAlumnoText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "El ID del alumno debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Crear un objeto Alumno
    Alumno alumnoModificado = new Alumno(idAlumno, codigoAlumno, carrera, ciclo, idAlumno, nombre, apellido, edad);
    
    // Crear una instancia de AlumnoDAOImpl
    ConexionSQL conexionSQL = new ConexionSQL(); // Asegúrate de tener tu conexión configurada
    AlumnoDAOImpl alumnoDAO = new AlumnoDAOImpl(conexionSQL);
    // Actualizar el alumno
    alumnoDAO.actualizarAlumno(alumnoModificado);
    
    // Actualizar la tabla con todos los alumnos
    List<Alumno> alumnos = alumnoDAO.obtenerTodosLosAlumnos();
    DefaultTableModel model = (DefaultTableModel) tb_Alumno.getModel();
    model.setRowCount(0); // Limpiar la tabla antes de agregar los nuevos alumnos
    for (Alumno alumno : alumnos) {
        model.addRow(new Object[]{
            alumno.getIdAlumno(),
            alumno.getCodigoAlumno(),
            alumno.getCarrera(),
            alumno.getCiclo(),
            alumno.getIdPersona(),
            alumno.getNombre(),
            alumno.getApellido(),
            alumno.getEdad()
        });
    }
    
    // Limpiar los campos de texto
    limpiarCampos();
    
    // Mostrar mensaje de éxito
    JOptionPane.showMessageDialog(this, "Alumno actualizado con éxito.", "Información", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btn_ModificarActionPerformed

    private void btn_Eliminar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Eliminar1ActionPerformed
    try {
        // Suponiendo que el ID del alumno a eliminar está en un campo de texto llamado txt_Filtro
        int idAlumno = Integer.parseInt(txt_Filtro.getText());
        
        // Crear una instancia de AlumnoDAOImpl
        ConexionSQL conexionSQL = new ConexionSQL(); // Asegúrate de tener tu conexión configurada
        AlumnoDAOImpl alumnoDAO = new AlumnoDAOImpl(conexionSQL);
        
        // Llamar al método para eliminar el alumno
        alumnoDAO.eliminarAlumno(idAlumno);
        
        // Informar al usuario que la eliminación fue exitosa
        JOptionPane.showMessageDialog(this, "Alumno eliminado correctamente.");
        
        // Actualizar la tabla con todos los alumnos
        List<Alumno> alumnos = alumnoDAO.obtenerTodosLosAlumnos();
        DefaultTableModel model = (DefaultTableModel) tb_Alumno.getModel();
        model.setRowCount(0); // Limpiar la tabla antes de agregar los nuevos alumnos
        for (Alumno alumno : alumnos) {
            model.addRow(new Object[]{
                alumno.getIdAlumno(),
                alumno.getCodigoAlumno(),
                alumno.getCarrera(),
                alumno.getCiclo(),
                alumno.getIdPersona(),
                alumno.getNombre(),
                alumno.getApellido(),
                alumno.getEdad()
            });
        }
        
    }catch (NumberFormatException e) {
        // Manejar el caso en que el ID ingresado no es un número válido
        JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID de alumno válido.");    }
  
    }//GEN-LAST:event_btn_Eliminar1ActionPerformed

    private void VerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerActionPerformed
// Obtener todos los alumnos de la base de datos utilizando la instancia de AlumnoDAOImpl
      ConexionSQL conexionSQL = new ConexionSQL();
AlumnoDAOImpl alumnoDAO = new AlumnoDAOImpl( conexionSQL);
    List<Alumno> todosLosAlumnos = alumnoDAO.obtenerTodosLosAlumnos();
    
    // Limpiar la tabla antes de agregar los nuevos datos
    DefaultTableModel model = (DefaultTableModel) tb_Alumno.getModel();
    model.setRowCount(0);
    
    // Iterar sobre la lista de alumnos y agregar cada uno como una fila en la tabla
    for (Alumno alumno : todosLosAlumnos) {
        model.addRow(new Object[]{
            alumno.getIdAlumno(),
            alumno.getCodigoAlumno(),
            alumno.getCarrera(),
            alumno.getCiclo(),
            alumno.getNombre(),
            alumno.getApellido(),
            alumno.getEdad()
        });
    }
    }//GEN-LAST:event_VerActionPerformed

    private void btn_BuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_BuscarActionPerformed
         try {
        // Suponiendo que tienes un JTextField llamado txtIdAlumno donde el usuario ingresa el ID del alumno
        int id = Integer.parseInt(txt_Filtro.getText());
        AlumnoDAOImpl alumnoDAO = new AlumnoDAOImpl(new ConexionSQL());
        Alumno alumno = alumnoDAO.obtenerAlumnoPorId(id);
        
        // Actualizar la tabla con los datos del alumno
        actualizarTablaAlumno(alumno);
        
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID válido");
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Ocurrió un error al buscar el alumno");
    }
    }//GEN-LAST:event_btn_BuscarActionPerformed
private void actualizarTablaAlumno(Alumno alumno) {
    DefaultTableModel model = (DefaultTableModel) tb_Alumno.getModel();
    model.setRowCount(0); // Limpiar la tabla antes de agregar los nuevos datos
    
    if (alumno != null) {
        Object[] rowData = {
            alumno.getIdAlumno(),
            alumno.getCodigoAlumno(),
            alumno.getCarrera(),
            alumno.getCiclo(),
            alumno.getIdPersona(),
            alumno.getNombre(),
            alumno.getApellido(),
            alumno.getEdad()
        };
        model.addRow(rowData);
    } else {
        JOptionPane.showMessageDialog(this, "Alumno no encontrado");
    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Panel_Alumno;
    private javax.swing.JPanel Panel_Buscar;
    private javax.swing.JButton Ver;
    private javax.swing.JButton btn_Agregar;
    private javax.swing.JButton btn_Buscar;
    private javax.swing.JButton btn_Eliminar1;
    private javax.swing.JButton btn_Modificar;
    private javax.swing.JComboBox<String> cbx_Carrera;
    private javax.swing.JComboBox<String> cbx_Ciclo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tb_Alumno;
    private javax.swing.JTextField txt_Apellido;
    private javax.swing.JTextField txt_CodAlumno;
    private javax.swing.JTextField txt_Edad;
    private javax.swing.JTextField txt_Filtro;
    private javax.swing.JTextField txt_Nombre;
    // End of variables declaration//GEN-END:variables
}
